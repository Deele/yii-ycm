{"note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Requirements\r\n------------------\r\n\r\n- Yii 1.1.10 or above (Requires jQuery 1.7.1)\r\n\r\nInstallation\r\n------------------\r\n\r\n- Download yii-ycm or clone the files to `protected/modules/ycm`\r\n- Edit Yii main configuration file `protected/config/main.php`. Enable module, set username, password and models you want to manage.\r\n\r\n~~~\r\n\t'modules'=>array(\r\n\t\t...\r\n\t\t'ycm'=>array(\r\n\t\t\t'username'=>'YOUR USERNAME',\r\n\t\t\t'password'=>'YOUR PASSWORD',\r\n\t\t\t'registerModels'=>array(\r\n\t\t\t\t//'application.models.Blog', // one model\r\n\t\t\t\t'application.models.*', // all models in folder\r\n\t\t\t),\r\n\t\t\t'uploadCreate'=>true, // create upload folder automatically\r\n\t\t\t'redactorUpload'=>true, // enable Redactor image upload\r\n\t\t),\r\n\t\t...\r\n\t),\r\n~~~\r\n\r\nExamples\r\n------------------\r\n\r\n### Basic\r\n\r\nCreate table:\r\n\r\n~~~\r\nCREATE TABLE `sample`\r\n(\r\n  `id` INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `field0` TINYINT(4) DEFAULT '0',\r\n  `field1` TINYINT(4) DEFAULT '0',\r\n  `field2` TINYINT(4) DEFAULT '0',\r\n  `field3` TINYINT(4) DEFAULT '0',\r\n  `field4` VARCHAR(128) NOT NULL,\r\n  `field5` VARCHAR(128) NOT NULL,\r\n  `field6` TEXT NOT NULL,\r\n  `field7` TEXT NOT NULL,\r\n  `field8` VARCHAR(64) DEFAULT NULL,\r\n  `field9` VARCHAR(64) DEFAULT NULL,\r\n  `field10` DATE DEFAULT NULL,\r\n  `field11` TIME DEFAULT NULL,\r\n  `field12` DATETIME DEFAULT NULL,\r\n  `field13` VARCHAR(64) DEFAULT NULL,\r\n  `field14` TINYINT(4) DEFAULT '0'\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n~~~\r\n\r\nCreate Sample model:\r\n\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"sample\".\r\n *\r\n * The followings are the available columns in table 'sample':\r\n * @property integer $id\r\n * @property integer $field0\r\n * @property integer $field1\r\n * @property integer $field2\r\n * @property integer $field3\r\n * @property string $field4\r\n * @property string $field5\r\n * @property string $field6\r\n * @property string $field7\r\n * @property string $field8\r\n * @property string $field9\r\n * @property string $field10\r\n * @property string $field11\r\n * @property string $field12\r\n * @property string $field13\r\n * @property integer $field14\r\n */\r\nclass Sample extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Admin variables (ycm module)\r\n\t */\r\n\tpublic $adminNames=array('Samples','sample','samples'); // admin interface, singular, plural\r\n\tpublic $downloadExcel=true; // Download Excel\r\n\tpublic $downloadMsCsv=true; // Download MS CSV\r\n\tpublic $downloadCsv=true; // Download CSV\r\n\r\n\t/**\r\n\t * Behaviors.\r\n\t * @return array\r\n\t */\r\n\tfunction behaviors() {\r\n\t    return array(\r\n\t\t\t'file' => array(\r\n\t\t\t\t'class'=>'application.modules.ycm.behaviors.FileBehavior',\r\n\t\t\t),\r\n\t    );\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return Sample the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'sample';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('field4, field5, field6, field7', 'required'),\r\n\t\t\tarray('field0, field1, field2, field3, field14', 'numerical', 'integerOnly'=>true),\r\n\t\t\tarray('field4, field5', 'length', 'max'=>128),\r\n\t\t\tarray('field8, field9, field13', 'length', 'max'=>64),\r\n\t\t\tarray('field8, field9', 'unsafe'),\r\n\t\t\tarray('field8', 'file', 'on'=>'insert', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png', 'maxSize'=>1024*1024*6),\r\n\t\t\tarray('field8', 'file', 'on'=>'update', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png', 'maxSize'=>1024*1024*6),\r\n\t\t\tarray('field9', 'file', 'on'=>'insert', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,gz,tar,zip,pdf,doc,docx,xls,xlsx,ppt,pptx,pps,ppsx', 'maxSize'=>1024*1024*6),\r\n\t\t\tarray('field9', 'file', 'on'=>'update', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,gz,tar,zip,pdf,doc,docx,xls,xlsx,ppt,pptx,pps,ppsx', 'maxSize'=>1024*1024*6),\r\n\t\t\tarray('field10, field11, field12', 'safe'),\r\n\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('id, field0, field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array relational rules.\r\n\t */\r\n\tpublic function relations()\r\n\t{\r\n\t\t// NOTE: you may need to adjust the relation name and the related\r\n\t\t// class name for the relations automatically generated below.\r\n\t\treturn array(\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'id' => 'ID',\r\n\t\t\t'field0' => 'Field 0',\r\n\t\t\t'field1' => 'Field 1',\r\n\t\t\t'field2' => 'Field 2',\r\n\t\t\t'field3' => 'Field 3',\r\n\t\t\t'field4' => 'Field 4',\r\n\t\t\t'field5' => 'Field 5',\r\n\t\t\t'field6' => 'Field 6',\r\n\t\t\t'field7' => 'Field 7',\r\n\t\t\t'field8' => 'Field 8',\r\n\t\t\t'field9' => 'Field 9',\r\n\t\t\t'field10' => 'Field 10',\r\n\t\t\t'field11' => 'Field 11',\r\n\t\t\t'field12' => 'Field 12',\r\n\t\t\t'field13' => 'Field 13',\r\n\t\t\t'field14' => 'Field 14',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('id',$this->id);\r\n\t\t$criteria->compare('field0',$this->field0);\r\n\t\t$criteria->compare('field1',$this->field1);\r\n\t\t$criteria->compare('field2',$this->field2);\r\n\t\t$criteria->compare('field3',$this->field3);\r\n\t\t$criteria->compare('field4',$this->field4,true);\r\n\t\t$criteria->compare('field5',$this->field5,true);\r\n\t\t$criteria->compare('field6',$this->field6,true);\r\n\t\t$criteria->compare('field7',$this->field7,true);\r\n\t\t$criteria->compare('field8',$this->field8,true);\r\n\t\t$criteria->compare('field9',$this->field9,true);\r\n\t\t$criteria->compare('field10',$this->field10,true);\r\n\t\t$criteria->compare('field11',$this->field11,true);\r\n\t\t$criteria->compare('field12',$this->field12,true);\r\n\t\t$criteria->compare('field13',$this->field13,true);\r\n\t\t$criteria->compare('field14',$this->field14);\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n \t * Config for attribute widgets (ycm module)\r\n\t *\r\n \t * @return array\r\n\t */\r\n\tpublic function attributeWidgets()\r\n\t{\r\n\t\treturn array(\r\n\t\t\tarray('field0','chosen'),\r\n\t\t\tarray('field1','chosenMultiple'),\r\n\t\t\tarray('field2','dropDown'),\r\n\t\t\tarray('field3','radioButton'),\r\n\t\t\tarray('field4','textField'),\r\n\t\t\tarray('field5','password'),\r\n\t\t\tarray('field6','textArea'),\r\n\t\t\tarray('field7','wysiwyg'),\r\n\t\t\tarray('field8','image'),\r\n\t\t\tarray('field9','file'),\r\n\t\t\tarray('field10','date'),\r\n\t\t\tarray('field11','time'),\r\n\t\t\tarray('field12','datetime'),\r\n\t\t\tarray('field13','disabled'),\r\n\t\t\tarray('field14','boolean'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for field0 (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function field0Choices()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'1'=>'First',\r\n\t\t\t'2'=>'Second',\r\n\t\t\t'3'=>'Third',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for field1 (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function field1Choices()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'1'=>'First',\r\n\t\t\t'2'=>'Second',\r\n\t\t\t'3'=>'Third',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for field2 (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function field2Choices()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'1'=>'First',\r\n\t\t\t'2'=>'Second',\r\n\t\t\t'3'=>'Third',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for field3 (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function field3Choices()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'1'=>'First',\r\n\t\t\t'2'=>'Second',\r\n\t\t\t'3'=>'Third',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Config for TbGridView class (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function adminSearch()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'columns'=>array(\r\n\t\t\t\t'field4',\r\n\t\t\t\t'id',\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name'=>'field0',\r\n\t\t\t\t\t'value'=>'$data->field0',\r\n\t\t\t\t\t'filter'=>Sample::model()->field0Choices(),\r\n\t\t\t\t),\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name'=>'field3',\r\n\t\t\t\t\t'value'=>'$data->field3',\r\n\t\t\t\t\t'filter'=>Sample::model()->field3Choices(),\r\n\t\t\t\t),\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name'=>'field14',\r\n\t\t\t\t\t'value'=>'$data->field14==1 ? CHtml::encode(\"Yes\") : CHtml::encode(\"No\")',\r\n\t\t\t\t\t'filter'=>array(1=>'Yes',0=>'No'),\r\n\t\t\t\t),\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name' => 'field12',\r\n\t\t\t\t\t'value' => 'date(\"d.m.Y H:i:s\",strtotime($data->field12))',\r\n\t\t\t\t),\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n~~~\r\n\r\nGo to: http://your.domain.com/ycm\r\n\r\n### One to many relationship (HAS_MANY)\r\n\r\nCreate tables:\r\n\r\n~~~\r\nCREATE TABLE `department`\r\n(\r\n  `id` INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `name` VARCHAR(128) NOT NULL,\r\n  `description` TEXT\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `blog`\r\n(\r\n  `id` INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `department_id` INTEGER DEFAULT NULL,\r\n  `title` VARCHAR(128) NOT NULL,\r\n  `content` TEXT NOT NULL,\r\n  CONSTRAINT `FK_department` FOREIGN KEY (`department_id`) REFERENCES `department` (`id`) ON DELETE SET NULL ON UPDATE RESTRICT\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n~~~\r\n\r\nCreate Department model:\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"department\".\r\n *\r\n * The followings are the available columns in table 'department':\r\n * @property integer $id\r\n * @property string $name\r\n * @property string $description\r\n *\r\n * The followings are the available model relations:\r\n * @property Blog[] $blogs\r\n */\r\nclass Department extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Admin variables (ycm module)\r\n\t */\r\n\tpublic $adminNames=array('Blog departments','blog department','blog departments'); // admin interface, singular, plural\r\n\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return Department the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'department';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('name', 'required'),\r\n\t\t\tarray('name', 'length', 'max'=>128),\r\n\t\t\tarray('description', 'safe'),\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('id, name, description', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array relational rules.\r\n\t */\r\n\tpublic function relations()\r\n\t{\r\n\t\t// NOTE: you may need to adjust the relation name and the related\r\n\t\t// class name for the relations automatically generated below.\r\n\t\treturn array(\r\n\t\t\t'blogs' => array(self::HAS_MANY, 'Blog', 'department_id'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'id' => 'ID',\r\n\t\t\t'name' => 'Name',\r\n\t\t\t'description' => 'Description',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('id',$this->id);\r\n\t\t$criteria->compare('name',$this->name,true);\r\n\t\t$criteria->compare('description',$this->description,true);\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n \t * Config for attribute widgets (ycm module)\r\n\t *\r\n \t * @return array\r\n\t */\r\n\tpublic function attributeWidgets()\r\n\t{\r\n\t\treturn array(\r\n\t\t\tarray('description','wysiwyg'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Config for TbGridView class (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function adminSearch()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'columns'=>array(\r\n\t\t\t\t'id',\r\n\t\t\t\t'name',\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n~~~\r\n\r\nCreate Blog model:\r\n\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"blog\".\r\n *\r\n * The followings are the available columns in table 'blog':\r\n * @property integer $id\r\n * @property integer $department_id\r\n * @property string $title\r\n * @property string $content\r\n *\r\n * The followings are the available model relations:\r\n * @property Department $department\r\n */\r\nclass Blog extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Admin variables (ycm module)\r\n\t */\r\n\tpublic $adminNames=array('Blog posts','blog post','blog posts'); // admin interface, singular, plural\r\n\tpublic $downloadExcel=true; // Download Excel\r\n\tpublic $downloadMsCsv=true; // Download MS CSV\r\n\tpublic $downloadCsv=true; // Download CSV\r\n\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return Blog the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'blog';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('title, content', 'required'),\r\n\t\t\tarray('department_id', 'numerical', 'integerOnly'=>true),\r\n\t\t\tarray('title', 'length', 'max'=>128),\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('id, department_id, title, content', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array relational rules.\r\n\t */\r\n\tpublic function relations()\r\n\t{\r\n\t\t// NOTE: you may need to adjust the relation name and the related\r\n\t\t// class name for the relations automatically generated below.\r\n\t\treturn array(\r\n\t\t\t'department' => array(self::BELONGS_TO, 'Department', 'department_id'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'id' => 'ID',\r\n\t\t\t'department_id' => 'Department',\r\n\t\t\t'title' => 'Title',\r\n\t\t\t'content' => 'Content',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('id',$this->id);\r\n\t\t$criteria->compare('department_id',$this->department_id);\r\n\t\t$criteria->compare('title',$this->title,true);\r\n\t\t$criteria->compare('content',$this->content,true);\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t\t'pagination'=>array(\r\n\t\t\t\t'pageSize'=>20,\r\n\t\t\t),\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n \t * Config for attribute widgets (ycm module)\r\n\t *\r\n \t * @return array\r\n\t */\r\n\tpublic function attributeWidgets()\r\n\t{\r\n\t\treturn array(\r\n\t\t\tarray('department_id','chosen'),\r\n\t\t\tarray('content','wysiwyg'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for department_id (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function department_idChoices()\r\n\t{\r\n\t\treturn CHtml::listData(Department::model()->findAll(), 'id', 'name');\r\n\t}\r\n\r\n\t/**\r\n\t * Config for TbGridView class (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function adminSearch()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'columns'=>array(\r\n\t\t\t\t'id',\r\n\t\t\t\t'title',\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name'=>'department_id',\r\n\t\t\t\t\t'value'=>'($data->department) ? $data->department->name : \"No department\"',\r\n\t\t\t\t\t'filter'=>$this->department_idChoices(),\r\n\t\t\t\t),\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n~~~\r\n\r\nGo to: http://your.domain.com/ycm\r\n\r\n\r\n### Many to many relationship (MANY_MANY)\r\n\r\nCreate tables:\r\n\r\n~~~\r\nCREATE TABLE `post`\r\n(\r\n  `id` INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `title` VARCHAR(128) NOT NULL,\r\n  `content` TEXT NOT NULL\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `category`\r\n(\r\n  `id` INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,\r\n  `name` VARCHAR(128) NOT NULL,\r\n  `description` TEXT\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n\r\nCREATE TABLE `post_category`\r\n(\r\n  `post_id` INTEGER NOT NULL,\r\n  `category_id` INTEGER NOT NULL,\r\n  PRIMARY KEY (`post_id`,`category_id`),\r\n  CONSTRAINT `FK_post_category` FOREIGN KEY (`post_id`) REFERENCES `post` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,\r\n  CONSTRAINT `FK_category_post` FOREIGN KEY (`category_id`) REFERENCES `category` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT\r\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\r\n~~~\r\n\r\nCreate Post model:\r\n\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"post\".\r\n *\r\n * The followings are the available columns in table 'post':\r\n * @property integer $id\r\n * @property string $title\r\n * @property string $content\r\n *\r\n * The followings are the available model relations:\r\n * @property Category[] $categories\r\n * @property PostCategory[] $category\r\n */\r\nclass Post extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Admin variables (ycm module)\r\n\t */\r\n\tpublic $adminNames=array('Posts','post','posts'); // admin interface, singular, plural\r\n\r\n\t/**\r\n\t * Categories id array\r\n\t *\r\n\t * @var array\r\n\t */\r\n\tpublic $assignedCategories;\r\n\r\n\t/**\r\n\t * Populate categories id array after find.\r\n\t */\r\n\tpublic function afterFind() {\r\n\t\tif (!$this->isNewRecord) {\r\n\t\t\t$this->assignedCategories=CHtml::listData($this->category,'category_id','category_id');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Update categories after save.\r\n\t */\r\n\tpublic function afterSave() {\r\n\t\tif (!$this->isNewRecord) {\r\n\t\t\t// delete all categories from Post\r\n\t\t\t$criteria=new CDbCriteria;\r\n\t\t\t$criteria->condition='post_id=:post_id';\r\n\t\t\t$criteria->params=array(':post_id'=>$this->id);\r\n\t\t\tPostCategory::model()->deleteAll($criteria);\r\n\t\t}\r\n\t\t// add selected categories to Post\r\n\t\tif(!empty($this->assignedCategories)) {\r\n\t\t\tforeach($this->assignedCategories as $category_id) {\r\n\t\t\t\t$postCategory=new PostCategory;\r\n\t\t\t\t$postCategory->post_id=$this->id;\r\n\t\t\t\t$postCategory->category_id=$category_id;\r\n\t\t\t\t$postCategory->save(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return Post the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'post';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('title, content', 'required'),\r\n\t\t\tarray('title', 'length', 'max'=>128),\r\n\t\t\tarray('assignedCategories', 'safe'),\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('id, title, content, assignedCategories', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array relational rules.\r\n\t */\r\n\tpublic function relations()\r\n\t{\r\n\t\t// NOTE: you may need to adjust the relation name and the related\r\n\t\t// class name for the relations automatically generated below.\r\n\t\treturn array(\r\n\t\t\t'categories'=>array(self::MANY_MANY,'Category','post_category(post_id,category_id)'),\r\n\t\t\t'category'=>array(self::HAS_MANY,'PostCategory','post_id'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'id' => 'ID',\r\n\t\t\t'assignedCategories' => 'Categories',\r\n\t\t\t'title' => 'Title',\r\n\t\t\t'content' => 'Content',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('id',$this->id);\r\n\t\t$criteria->compare('title',$this->title,true);\r\n\t\t$criteria->compare('content',$this->content,true);\r\n\r\n\t\t$criteria->compare('category_id',$this->assignedCategories);\r\n\t\t$criteria->with=array('category');\r\n\t\t$criteria->together=true;\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t\t'pagination'=>array(\r\n\t\t\t\t'pageSize'=>20,\r\n\t\t\t),\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n\t * @return string Category names separated with a comma.\r\n\t */\r\n\tpublic function getRelatedCategoryNames()\r\n\t{\r\n\t\t$out=CHtml::listData($this->categories,'id','name');\r\n\t\treturn implode(', ', $out);\r\n\t}\r\n\r\n\t/**\r\n \t * Config for attribute widgets (ycm module)\r\n\t *\r\n \t * @return array\r\n\t */\r\n\tpublic function attributeWidgets()\r\n\t{\r\n\t\treturn array(\r\n\t\t\tarray('assignedCategories','chosenMultiple'),\r\n\t\t\tarray('content','wysiwyg'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Select choices for assignedCategories (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function assignedCategoriesChoices()\r\n\t{\r\n\t\treturn CHtml::listData(Category::model()->findAll(array('order'=>'name ASC')), 'id', 'name');\r\n\t}\r\n\r\n\t/**\r\n\t * Config for TbGridView class (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function adminSearch()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'columns'=>array(\r\n\t\t\t\t'id',\r\n\t\t\t\t'title',\r\n\t\t\t\tarray(\r\n\t\t\t\t\t'name'=>'assignedCategories',\r\n\t\t\t\t\t'value'=>'$data->relatedCategoryNames',\r\n\t\t\t\t\t'filter'=>$this->assignedCategoriesChoices(),\r\n\t\t\t\t\t'type'=>'html',\r\n\t\t\t\t),\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n~~~\r\n\r\nCreate Category model:\r\n\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"category\".\r\n *\r\n * The followings are the available columns in table 'category':\r\n * @property integer $id\r\n * @property string $name\r\n * @property string $description\r\n *\r\n * The followings are the available model relations:\r\n * @property Post[] $posts\r\n * @property Post[] $postCount\r\n */\r\nclass Category extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Admin variables (ycm module)\r\n\t */\r\n\tpublic $adminNames=array('Post categories','post category','post categories'); // admin interface, singular, plural\r\n\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return Category the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'category';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('name', 'required'),\r\n\t\t\tarray('name', 'length', 'max'=>128),\r\n\t\t\tarray('description', 'safe'),\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('id, name, description', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array relational rules.\r\n\t */\r\n\tpublic function relations()\r\n\t{\r\n\t\t// NOTE: you may need to adjust the relation name and the related\r\n\t\t// class name for the relations automatically generated below.\r\n\t\treturn array(\r\n\t\t\t'posts' => array(self::MANY_MANY, 'Post', 'post_category(category_id, post_id)'),\r\n\t\t\t'postCount' => array(self::STAT, 'Post', 'post_category(category_id, post_id)'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'id' => 'ID',\r\n\t\t\t'name' => 'Name',\r\n\t\t\t'description' => 'Description',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('id',$this->id);\r\n\t\t$criteria->compare('name',$this->name,true);\r\n\t\t$criteria->compare('description',$this->description,true);\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t\t'pagination'=>array(\r\n\t\t\t\t'pageSize'=>20,\r\n\t\t\t),\r\n\t\t));\r\n\t}\r\n\r\n\t/**\r\n \t * Config for attribute widgets (ycm module)\r\n\t *\r\n \t * @return array\r\n\t */\r\n\tpublic function attributeWidgets()\r\n\t{\r\n\t\treturn array(\r\n\t\t\tarray('description','wysiwyg'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Config for TbGridView class (ycm module)\r\n\t *\r\n\t * @return array\r\n\t */\r\n\tpublic function adminSearch()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'columns'=>array(\r\n\t\t\t\t'id',\r\n\t\t\t\t'name',\r\n\t\t\t),\r\n\t\t);\r\n\t}\r\n}\r\n~~~\r\n\r\nCreate PostCategory model:\r\n\r\n~~~\r\n<?php\r\n\r\n/**\r\n * This is the model class for table \"post_category\".\r\n *\r\n * The followings are the available columns in table 'post_category':\r\n * @property integer $post_id\r\n * @property integer $category_id\r\n */\r\nclass PostCategory extends CActiveRecord\r\n{\r\n\t/**\r\n\t * Returns the static model of the specified AR class.\r\n\t * @param string $className active record class name.\r\n\t * @return PostCategory the static model class\r\n\t */\r\n\tpublic static function model($className=__CLASS__)\r\n\t{\r\n\t\treturn parent::model($className);\r\n\t}\r\n\r\n\t/**\r\n\t * @return string the associated database table name\r\n\t */\r\n\tpublic function tableName()\r\n\t{\r\n\t\treturn 'post_category';\r\n\t}\r\n\r\n\t/**\r\n\t * @return array validation rules for model attributes.\r\n\t */\r\n\tpublic function rules()\r\n\t{\r\n\t\t// NOTE: you should only define rules for those attributes that\r\n\t\t// will receive user inputs.\r\n\t\treturn array(\r\n\t\t\tarray('post_id, category_id', 'required'),\r\n\t\t\tarray('post_id, category_id', 'numerical', 'integerOnly'=>true),\r\n\t\t\t// The following rule is used by search().\r\n\t\t\t// Please remove those attributes that should not be searched.\r\n\t\t\tarray('post_id, category_id', 'safe', 'on'=>'search'),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * @return array customized attribute labels (name=>label)\r\n\t */\r\n\tpublic function attributeLabels()\r\n\t{\r\n\t\treturn array(\r\n\t\t\t'post_id' => 'Post',\r\n\t\t\t'category_id' => 'Category',\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves a list of models based on the current search/filter conditions.\r\n\t * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.\r\n\t */\r\n\tpublic function search()\r\n\t{\r\n\t\t// Warning: Please modify the following code to remove attributes that\r\n\t\t// should not be searched.\r\n\r\n\t\t$criteria=new CDbCriteria;\r\n\r\n\t\t$criteria->compare('post_id',$this->post_id);\r\n\t\t$criteria->compare('category_id',$this->category_id);\r\n\r\n\t\treturn new CActiveDataProvider($this, array(\r\n\t\t\t'criteria'=>$criteria,\r\n\t\t\t'pagination'=>array(\r\n\t\t\t\t'pageSize'=>20,\r\n\t\t\t),\r\n\t\t));\r\n\t}\r\n}\r\n~~~\r\n\r\nGo to: http://your.domain.com/ycm\r\n\r\nLicense\r\n------------------\r\n\r\nyii-ycm is free and unencumbered [public domain][Unlicense] software.\r\n\r\n[Unlicense]: http://unlicense.org/","name":"yii-ycm","tagline":"YCM - Yii Content Management module","google":"UA-36032651-1"}